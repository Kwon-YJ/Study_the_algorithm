import binascii

def Add_Round_Key(text, key):
    result = [[0]*4 for i in range(4)]
    for i in range(4):
        for j in range(4):
            result[i][j] = bin(int(text[i][j], 2)^int(key[i][j], 2))[2:].zfill(8) # str to int, XOR, zfill //zfill은 상위 비트값==0일때 소멸하는 것을 막아준다.
    return result

def Sub_Byte(text):
    block_4x4 = [[0]*4 for i in range(4)]
        #           0    1    2    3    4    5    6    7    8    9   10   11   12   13   14   15
    S_box = [['63','7c','77','7b','f2','6b','6f','c5','30','01','67','2b','fe','d7','ab','76'] #0
            ,['ca','82','c9','7d','fa','59','47','f0','ad','d4','a2','af','9c','a4','72','c0'] #1
            ,['b7','fd','93','26','36','3f','f7','cc','34','a5','e5','f1','71','d8','31','15'] #2
            ,['04','c7','23','c3','18','96','05','9a','07','12','80','e2','eb','27','b2','75'] #3
            ,['09','83','2c','1a','1b','6e','5a','a0','52','3b','d6','b3','29','e3','2f','84'] #4
            ,['53','d1','00','ed','20','fc','b1','5b','6a','cb','be','39','4a','4c','58','cf'] #5
            ,['d0','ef','aa','fb','43','4d','33','85','45','f9','02','7f','50','3c','9f','a8'] #6
            ,['51','a3','40','8f','92','9d','38','f5','bc','b6','da','21','10','ff','f3','d2'] #7
            ,['cd','0c','13','ec','5f','97','44','17','c4','a7','7e','3d','64','5d','19','73'] #8
            ,['60','81','4f','dc','22','2a','90','88','46','ee','b8','14','de','5e','0b','db'] #9 
            ,['e0','32','3a','0a','49','06','24','5c','c2','d3','ac','62','91','95','e4','79'] #a 10
            ,['e7','c8','37','6d','8d','d5','4e','a9','6c','56','f4','ea','65','7a','ae','08'] #b 11
            ,['ba','78','25','2e','1c','a6','b4','c6','e8','dd','74','1f','4b','bd','8b','8a'] #c 12
            ,['70','3e','b5','66','48','03','f6','0e','61','35','57','b9','86','c1','1d','9e'] #d 13
            ,['e1','f8','98','11','69','d9','8e','94','9b','1e','87','e9','ce','55','28','df'] #e 14
            ,['8c','a1','89','0d','bf','e6','42','68','41','99','2d','0f','b0','54','bb','16']]#f 15
    for i in range(4):
        for j in range(4):
            block_4x4[i][j] = S_box[(int((text[i][j])[0:4], 2))][(int((text[i][j])[4:8], 2))]
    return block_4x4

def Shift_Row(text):
    temp = text[1][0]
    text[1][0] = text[1][1]
    text[1][1] = text[1][2]
    text[1][2] = text[1][3]
    text[1][3] = temp

    temp = text[2][0]
    text[2][0] = text[2][2]
    text[2][2] = temp

    temp = text[2][3]
    text[2][3] = text[2][1]
    text[2][1] = temp

    temp = text[3][0]
    text[3][0] = text[3][3]
    text[3][3] = text[3][2]
    text[3][2] = text[3][1]
    text[3][1] = temp

    return text
         
def Mix_Column(text):
    return None

def make_block(text):
    bin_text = ''.join(format(ord(i), 'b') for i in text) # text는 바이너리화 된다.
    block_4x4 = [[0]*4 for i in range(4)] #원소가 전부0인(사실상 비어있는) 2차원 리스트 생성
    i = 0
    j = 0
    temp = 0
    while(i<4): 
        while(j<4):
            block_4x4[j][i] = bin_text[temp:temp+7] #[i][j]가 아닌 [j][i]이다. 즉, 데이터는 세로로 삽입된다. 8비트씩 잘려 이쁘게 담겨진다.
            temp += 7 
            j += 1
        j = 0
        i += 1
    return block_4x4

#main
#-----------------------------------------------------------------------------------------------------------------------
key=[['00000100','00001000','00001100','00001111']
    ,['00000101','00001010','00000111','11101110']
    ,['10110111','10011001','00000110','11001100']
    ,['00000011','00010010','11111111','00001011']]

Plane_Text = "128 bit data use!.. "

a = Shift_Row(Sub_Byte(Add_Round_Key(make_block(Plane_Text), key)))

print(a)
